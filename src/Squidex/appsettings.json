{
  "urls": {
    /*
     * Set the base url of your application, to generate correct urls in background process.
     */
    "baseUrl": "http://localhost:5000"
  },

  "ui": {
    /*
     * Regex suggestions for the UI
     */
    "regexSuggestions": [
      {
        "Name": "Currency",
        "Pattern": "^\\$?\\s*\\d+(,\\d{3})*(\\.\\d{1,2})?$",
        "DefaultMessage": "This field must be a valid Currency."
      },
      {
        "Name": "Email",
        "Pattern": "^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9]{2,}$",
        "DefaultMessage": "This field must be a valid Email Address."
      },
      {
        "Name": "Letters",
        "Pattern": "^[a-zA-Z ]+$",
        "DefaultMessage": "This field must be only Letters."
      },
      {
        "Name": "Letters and Numbers",
        "Pattern": "^[a-zA-Z0-9 ]+$",
        "DefaultMessage": "This field must be only Letters and Numbers."
      },
      {
        "Name": "Numbers",
        "Pattern": "^(([0-9]+?[0-9,]+?[0-9](|.[0-9]+))|([0-9]*(|.[0-9]+)))$",
        "DefaultMessage": "This field must be a valid Number."
      },
      {
        "Name": "Phone",
        "Pattern": "^(\\([0-9]{3}\\)|[0-9]{3})?[ -\\.]?[0-9]{3}[ -\\.]?[0-9]{4}$",
        "DefaultMessage": "This field must be a valid Phone Number."
      },
      {
        "Name": "Url",
        "Pattern": "^(((((https?|s?ftp)|(HTTPS?|S?FTP)):\\/\\/)?(www.|WWW.)?([a-zA-Z0-9])+\\.[a-zA-Z]+(((\\/)?[a-zA-Z0-9#].*)+\\/?))*|(\\/.+))$",
        "DefaultMessage": "This field must be a valid Url."
      },
      {
        "Name": "Zip Code",
        "Pattern": "^\\d{5}([\\-]\\d{4})?$",
        "DefaultMessage": "This field must be a valid Zip Code."
      }
    ]
  },

  "logging": {
    /*
     * Setting the flag to true, enables well formatteds json logs.
     */
    "human": false
  },

  /*
   * The pub sub mechanmism distributes messages between the nodes.
   */
  "pubSub": {
    /*
     * Define the type of the read store. 
     * 
     * Supported: InMemory (for single node only), Redis (for cluster)
     */
    "type": "InMemory",
    "redis": {
      /*
       * Connection string to your redis server.
       *
       * Read More: https://github.com/ServiceStack/ServiceStack.Redis#redis-connection-strings
       */
      "configuration": "localhost:6379,resolveDns=1"
    }
  },

  "assetStore": {
    /*
     * Define the type of the read store. 
     * 
     * Supported: Folder (local folder), GoogleCloud (hosted in Google Cloud only), AzureBlob.
     */
    "type": "Folder",
    "folder": {
      /*
       * The relative or absolute path to the folder to store the assets.
       */
      "path": "Assets"
    },
    "googleCloud": {
      /*
       * The name of the bucket in google cloud store.
       */
      "bucket": "squidex-assets"
    },
    "azureBlob": {
      /*
       * The name of the container in the Azure Blob Storage
       */
      "containerName": "squidex-assets",
      /*
       * The connection string to the azure storage service.
       */
      "connectionString": "UseDevelopmentStorage=true"
  },
    /*
     * Allow to expose the url in graph ql url.
     */
    "exposeSourceUrl": false 
  },

  "eventStore": {
    /*
     * Define the type of the event store. 
     * 
     * Supported: MongoDb, GetEventStore
     */
    "type": "MongoDb",
    "mongoDb": {
      /*
       * The connection string to your Mongo Server.
       * 
       * Read More: https://docs.mongodb.com/manual/reference/connection-string/
       */
      "configuration": "mongodb://dependencies_squidex_mongo_1",
      /*
       * The name of the event store database.
       */
      "database": "Squidex"
    },
    "getEventStore": {
      /*
       * The connection string to your EventStore.
       * 
       * Read Mode: http://docs.geteventstore.com/dotnet-api/4.0.0/connecting-to-a-server/
       */
      "configuration": "ConnectTo=tcp://admin:changeit@localhost:1113; HeartBeatTimeout=500; MaxReconnections=-1",
      /*
       * The host name of your EventStore where projection requests will be sent to.
       */
      "projectionHost": "localhost",
      /*
       * Prefix for all streams and projections (for multiple installations).
       */
      "prefix": "squidex"
    },
    /*
     * Consume the events on this server (Ensure that it is only enabled on a single node).
     */
    "consume": true
  },

  "eventPublishers": {
    /*
     * Additional event publishers (advanced usage only): (Name => Config)
     */
    "allToRabbitMq": {
      /*
       * Example:: Push all events to RabbitMq.
       */
      "type": "RabbitMq",
      "configuration": "amqp://guest:guest@localhost/",
      "exchange": "squidex",
      "enabled": false,
      "eventsFilter": ".*"
    }
  },

  "store": {
    /*
     * Define the type of the read store. 
     * 
     * Supported: MongoDb
     */
    "type": "MongoDb",
    "mongoDb": {
      /*
       * The connection string to your Mongo Server.
       * 
       * Read More: https://docs.mongodb.com/manual/reference/connection-string/
       */
      "configuration": "mongodb://dependencies_squidex_mongo_1",
      /*
       * The database for all your content collections (one collection per app).
       */
      "contentDatabase": "SquidexContent",
      /*
       * The database for all your other read collections.
       */
      "database": "Squidex"
    }
  },

	"identity": {
		/*
     * Enable password auth.
     */
		"allowPasswordAuth": true,
		/*
     * Settings for Google auth (keep empty to disable).
     */
		"googleClient": "1006817248705-t3lb3ge808m9am4t7upqth79hulk456l.apps.googleusercontent.com",
		"googleSecret": "QsEi-fHqkGw2_PjJmtNHf2wg",
		/*
     * Settings for Github auth (keep empty to disable).
     */
		"githubClient": "211ea00e726baf754c78",
		"githubSecret": "d0a0d0fe2c26469ae20987ac265b3a339fd73132",
		/*
     * Settings for Microsoft auth (keep empty to disable).
     */
		"microsoftClient": "b55da740-6648-4502-8746-b9003f29d5f1",
		"microsoftSecret": "idWbANxNYEF4cB368WXJhjN",
		/*
     * Lock new users automatically, the administrator must unlock them.
     */
		"lockAutomatically": false,
		/*
		 * Settings for CivicPlus auth
		 */
		"civicPlusIdentityServerBaseUrl": "https://identityserver.cpqa.ninja",
		"civicPlusPlatformBaseUrl": "https://civiccenter.cpqa.ninja",
		"civicPlusClient": "88",
		"civicPlusSecret": "test",
		"civicPlusPostLogoutRedirectUri": "http://localhost:5000/identity-server/account/logout",
		"civicPlusScope": "openid identity profile reset_password write_identity get_products get_users get_user_information",
		"civicPlusResponseType": "code id_token token",
		"keysStore": {
			/*
       * Define the type of the key store. 
       * 
       * Supported: InMemory (development only), Folder (shared or local), Redis
       * 
       * Read More: https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-storage-providers
       */
			"type": "InMemory",
			"redis": {
				/*
         * Connection string to your redis server.
         *
         * Read More: https://github.com/ServiceStack/ServiceStack.Redis#redis-connection-strings
         */
				"configuration": "localhost:6379,resolveDns=1"
			},
			"folder": {
				/*
         * Relative or absolute path to your encryption keys folder.
         */
				"path": "keys"
			}
		}
	}
}